#Сложность O(n**2)
class Solution():
    def countSquares(self, matrix):
        count=0 #Задаем счетчик
        for i in range(len(matrix)): #Создаем цикл, проходящий по длине нашего списка, состоящий из списков (матрица)
            for j in range(len(matrix[0])): #Создаем цикл в цикле, проходящий по длине первого списка в списке. P.S. Очень много тавтологии :)
                if matrix[i][j]==1: #Если элемент нашей матрицы равен 1, то есть существует одинарная квадратная матрица
                    count+=1 #В счетчик закидываем +1
                if i==0 or j==0: #Если же 0, то продолжаем цикл
                    continue
                val=matrix[i][j] #Задаем переменную, в которой указываем индексы нашего списка (матрицы)
                matrix[i][j]=min(matrix[i-1][j-1],matrix[i][j-1],matrix[i-1][j]) +1 if matrix[i][j]==1 else 0 #Вносим в нашу матрицу определитель квадратной матрицы 2x2 при помощи минимального значения из прошлых элементов списка в списке (матриц), если эти элементы равны все 1, то плюсуем 1, если нет плюсуем 0
                count=count+matrix[i][j]-val #Закидываем в счетчик -- счетчик+матрицу с определителем и вычитаем переменную с индексами без определителя
        return count #Возвращаем счетчик


print(Solution.countSquares("",[[1,0,1],[1,1,0],[1,1,0]]))